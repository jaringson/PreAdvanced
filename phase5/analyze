#!/usr/bin/perl
#To run this analyzer type the command
#perl analyze [name] [lab number]
use strict;
use warnings;
use Term::ANSIColor qw(:constants);
#Variable declarations
my $input = "";
my $user;
my $lab ;
my $num = 0;
my $quit;
my $ind;
my $extreme_optimize = "";
my $extreme_debug = "";
my $extreme_warnings = "";
my $extreme_full = "";
my $compile = "";
my $valgrind = "";
my $full = "";
my $GDB = "";
my @arg = @ARGV;
#Match one of the arguments with the highest lab number
($ind)= grep{$arg[$_] eq 1} 1..$#arg;
	if($ind){
		$num = $ind;
		$lab = "1";
		splice (@arg,$num , 1);
		undef $num;
	}
($ind)= grep{$arg[$_] eq 2} 1..$#arg;
	if($ind){
		$num = $ind;
		$lab = "2";
		splice (@arg,$num  , 1);
		undef $num;
	}
($ind)= grep{$arg[$_] eq 3} 1..$#arg;
	if($ind){
		$num = $ind;
		$lab = "3";
		splice (@arg,$num  , 1);
		undef $num;
	}
($ind)= grep{$arg[$_] eq 4} 1..$#arg;
	if($ind){
		$num = $ind;
		$lab = "4";
		splice (@arg,$num  , 1);
		undef $num;
	}
($ind)= grep{$arg[$_] eq 5} 1..$#arg;
	if($ind){
		$num = $ind;
		$lab = "5";
		splice (@arg,$num  , 1);
		undef $num;
	}
#check for the -c Compile flag
($ind)= grep{$arg[$_] eq "-c"} 1..$#arg;
	if($ind){
		$num = $ind;
		$compile = $arg[$num];
		splice (@arg,$num  , 1);
		undef $num;
	}
#check for the -q quit flag
($ind)= grep{$arg[$_] eq "-q"} 1..$#arg;
	if($ind){
		$num = $ind;
		$quit = $arg[$num];
		splice (@arg,$num  , 1);
		undef $num;
	}
#check for the -g GDB flag
($ind)= grep{$arg[$_] eq "-g"} 1..$#arg;
	if($ind){
		$num = $ind;
		$GDB = $arg[$num];
		splice (@arg,$num  , 1);
		undef $num;
	}
#check for the -v Valgrind flag
($ind)= grep{$arg[$_] eq "-v"} 1..$#arg;
	if($ind){
		$num = $ind;
		$valgrind = $arg[$num];
		splice (@arg,$num  , 1);
		undef $num;
	}
#check for the -xo extreme_optimize flag
($ind)= grep{$arg[$_] eq "-xo"} 1..$#arg;
	if($ind){
		$num = $ind;
		$extreme_optimize = $arg[$num];
		splice (@arg,$num  , 1);
		undef $num;
	}
#check for the -xw extreme_warnings flag
($ind)= grep{$arg[$_] eq "-xw"} 1..$#arg;
	if($ind){
		$num = $ind;
		$extreme_warnings = $arg[$num];
		splice (@arg,$num  , 1);
		undef $num;
	}
#check for the -xd extreme_debug flag
($ind)= grep{$arg[$_] eq "-xd"} 1..$#arg;
	if($ind){
		$num = $ind;
		$extreme_debug = $arg[$num];
		splice (@arg,$num  , 1);
		undef $num;
	}
#check for the -xd extreme_debug flag
($ind)= grep{$arg[$_] eq "-xf"} 1..$#arg;
	if($ind){
		$num = $ind;
		$extreme_full = $arg[$num];
		$valgrind = $arg[$num];
		splice (@arg,$num  , 1);
		undef $num;
	}
#check for -full flag
($ind)= grep{$arg[$_] eq "-full"} 1..$#arg;
	if($ind){
		$full = $arg[$num];
		$num = $ind;
		$valgrind = $arg[$num];
		$compile = $arg[$num];
		splice (@arg,$num  , 1);
		undef $num;
	}
$user = shift(@arg);
print BLUE,"\nuser  = ";
print RED, "$user";
print BLUE,"\nproject = ";
print RED, "$lab";
print BLUE, "\ncompile = ";
if(!$full and !$extreme_full and !$extreme_optimize and !$extreme_warnings and !$extreme_debug){
	if($compile){
		print RED,"true";
	}
	else{
		print RED,"false";
	}
	print BLUE "\nvalgrind = ";
	if($valgrind){
		print RED,"true",RESET;
	}
	else{
		print RED,"false",RESET;
	}
	print   BLUE,"\nGDB = ";
	if($GDB){
		print RED,"true",RESET;
	}
	else{
		print RED,"false",RESET;
	}
}
else{
	print RED,"\n\n\t\tYOU ASKED FOR IT!!!!!!!!!\n\n",RESET;
}

if (!$lab){
	$lab = "4";
}
my $i = 0;
my $fail = 0;

if(!$user){
	print RED,"\n\nI NEED A USER NAME!\n",RESET;
	exit(256);
}
#Flag commands and error checking
if($extreme_optimize){
	system("g++ -std=c++11 *.cpp -o test$lab-$user -fassociative-math -fbranch-target-load-optimize  -fcheck-data-deps -fconserve-stack -fcprop-registers -fcrossjumping -fcse-follow-jumps -fcse-skip-blocks -fcx-fortran-rules -fcx-limited-range -fdata-sections -fdce -fdce -fdelayed-branch -fdelete-null-pointer-checks -fdse -fdse -fearly-inlining -fexpensive-optimizations -ffast-math -ffinite-math-only -ffloat-store -fforward-propagate -ffunction-sections -fgcse -fgcse-after-reload -fgcse-las -fgcse-lm -fgcse-sm -fif-conversion -fif-conversion2 -findirect-inlining -finline-functions -finline-functions-called-once -finline-small-functions -fipa-cp -fipa-cp-clone -fipa-matrix-reorg -fipa-pta -fipa-pure-const -fipa-reference -fipa-struct-reorg  -fno-ira-share-save-slots -fno-ira-share-spill-slots  -fivopts -fkeep-inline-functions -fkeep-static-consts -floop-block -floop-interchange -floop-strip-mine -fmerge-all-constants -fmerge-constants -fmodulo-sched -fmodulo-sched-allow-regmoves -fmove-loop-invariants  -fno-branch-count-reg -fno-default-inline -fno-defer-pop -fno-guess-branch-probability -fno-inline -fno-math-errno -fno-peephole -fno-peephole2 -fno-sched-interblock -fno-sched-spec -fno-signed-zeros -fno-toplevel-reorder -fno-trapping-math -fno-zero-initialized-in-bss -fomit-frame-pointer -foptimize-register-move -foptimize-sibling-calls -fpeel-loops -fpredictive-commoning -fprefetch-loop-arrays -fprofile-correction  -freciprocal-math -fregmove -frename-registers -freorder-blocks -freorder-blocks-and-partition -freorder-functions -frerun-cse-after-loop -freschedule-modulo-scheduled-loops -frounding-math  -fsched2-use-superblocks -fsched2-use-traces -fsched-spec-load -fsched-spec-load-dangerous   -fschedule-insns -fschedule-insns2 -fsection-anchors -fsee -fselective-scheduling -fselective-scheduling2 -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fsignaling-nans -fsingle-precision-constant -fsplit-ivs-in-unroller -fsplit-wide-types -fstack-protector -fstack-protector-all -fstrict-aliasing -fstrict-overflow -fthread-jumps -ftracer -ftree-builtin-call-dce -ftree-ccp -ftree-ch  -ftree-coalesce-vars -ftree-copy-prop -ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-fre -ftree-loop-im -ftree-loop-distribution -ftree-loop-ivcanon -ftree-loop-linear -ftree-loop-optimize  -ftree-pre -ftree-reassoc -ftree-sink -ftree-sra -ftree-switch-conversion -ftree-ter -ftree-vect-loop-version -ftree-vectorize -ftree-vrp -funit-at-a-time -funroll-all-loops -funroll-loops -funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops -fvariable-expansion-in-unroller -fvect-cost-model -fvpt -fweb -fwhole-program");
}
if($extreme_warnings){
	system("g++ -std=c++11 *.cpp -o test$lab-$user -fsyntax-only -pedantic -pedantic-errors -w -Wextra -Wall -Waddress -Waggregate-return -Warray-bounds   -Wcast-align -Wcast-qual -Wchar-subscripts -Wclobbered -Wcomment -Wconversion -Wcoverage-mismatch  -Wdisabled-optimization  -Wempty-body -Wenum-compare -Werror -Wfatal-errors -Wfloat-equal -Wformat -Wformat=2 -Wformat-nonliteral -Wformat-security -Wformat-y2k -Wignored-qualifiers  -Winvalid-pch -Wunsafe-loop-optimizations -Wlogical-op -Wlong-long -Wmain -Wmissing-braces -Wmissing-field-initializers -Wmissing-format-attribute -Wmissing-include-dirs -Wmissing-noreturn    -Woverlength-strings -Wpacked -Wpacked-bitfield-compat -Wpadded -Wparentheses    -Wredundant-decls -Wreturn-type -Wsequence-point -Wshadow -Wsign-compare -Wsign-conversion -Wstack-protector -Wstrict-overflow  -Wswitch -Wswitch-default -Wswitch-enum -Wsync-nand -Wsystem-headers -Wtrigraphs -Wtype-limits -Wundef -Wuninitialized -Wunknown-pragmas  -Wunreachable-code -Wunused -Wunused-function -Wunused-label -Wunused-parameter -Wunused-value -Wunused-variable -Wunused-but-set-parameter -Wunused-but-set-variable -Wvariadic-macros -Wvla -Wvolatile-register-var -Wwrite-strings");
}
if($extreme_debug){
	 system("g++ -std=c++11 *.cpp -o test$lab-$user -dumpspecs -dumpmachine -dumpversion -fdbg-cnt-list -fdump-noaddr -fdump-unnumbered -fdump-unnumbered-links -fdump-tree-cfg -fdump-tree-vcg -fdump-tree-alias -fdump-tree-ch -fdump-tree-nrv -fdump-tree-vect -fdump-tree-sink -fcompare-debug-second -feliminate-dwarf2-dups -feliminate-unused-debug-types -feliminate-unused-debug-symbols -femit-class-debug-always -fmem-report -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs -fsel-sched-verbose -fsel-sched-dump-cfg -fsel-sched-pipelining-verbose -ftest-coverage -ftime-report -fvar-tracking -fvar-tracking-assignments -fvar-tracking-assignments-toggle -g -femit-struct-debug-baseonly -femit-struct-debug-reduced -p -pg -print-libgcc-file-name -print-multi-directory -print-multi-lib -print-multi-os-directory -print-search-dirs -Q -print-sysroot -print-sysroot-headers-suffix -save-temps");
}
if($extreme_full){
	system("g++ -std=c++11 *.cpp -o test$lab-$user -fassociative-math  -fbtr-bb-exc     -fcheck-data-deps -fconserve-stack -fcprop-registers -fcrossjumping -fcse-follow-jumps -fcse-skip-blocks -fcx-fortran-rules -fcx-limited-range -fdata-sections     -fdce -fdce -fdelayed-branch -fdelete-null-pointer-checks -fdse -fdse -fearly-inlining -fexpensive-optimizations -ffast-math -ffinite-math-only -ffloat-store -fforward-propagate    -fgcse -fgcse-after-reload -fgcse-las -fgcse-lm -fgcse-sm -fif-conversion -fif-conversion2 -findirect-inlining -finline-functions -finline-functions-called-once -fi    -fipa-cp -fipa-cp-clone -fipa-matrix-reorg -fipa-pta -fipa-pure-const -fipa-reference -fipa-struct-reorg   -fno-ira-share-save-s     -fno-ira-share-spill-slots  -fivopts -fkeep-inline-functions -fkeep-static-consts -floop-block -floop-interchange -floop-strip-mine -fmerge-all-constants -fmerge    -constants -fmodulo-sched -fmodulo-sched-allow-regmoves -fmove-loop-invariants -fno-branch-count-reg -fno-default-inline -fno-defer-pop -fno-functi    -fno-guess-branch-probability -fno-inline -fno-math-errno -fno-peephole -fno-peephole2 -fno-sched-interblock -fno-sched-spec -fno-signed-zeros -fno-toplevel-reorder -fno-trap    -fno-zero-initialized-in-bss -fomit-frame-pointer -foptimize-register-move -foptimize-sibling-calls -fpeel-loops -fpredictive-commoning -fprefetch-loop-arrays -fprofile-co      -freciprocal-math -fregmove -frename-registers -freorder-blocks -freorder-blocks-and-partition -freorder-functions -frerun-cse-after-loop -freschedule-modulo-scheduled-loo    -frounding-math -fsched2-use-superblocks -fsched2-use-traces -fsched-spec-load -fsched-spec-load-dangerous   -fschedule-insns -fschedule-insns2 -fsection    -anchors -fsee -fselective-scheduling -fselective-scheduling2 -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fsignaling-nans -fsingle-precision-constant -fsplit-ivs-in-u    -fsplit-wide-types -fstack-protector -fstack-protector-all -fstrict-aliasing -fstrict-overflow -fthread-jumps -ftracer -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-co    -ftree-coalesce-vars -ftree-copy-prop -ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-fre -ftree-loop-im -ftree-loop-distribution -ftree-loop    -ivcanon -ftree-loop-linear -ftree-loop-optimize -ftree-pre -ftree-reassoc -ftree-sink -ftree-sra -ftree-switch-conversion -ftree-ter -ftree-vect-loop-ver     -ftree-vectorize -ftree-vrp -funit-at-a-time -funroll-all-loops -funroll-loops -funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops -fvariable-expansion-in-    -fvect-cost-model -fvpt -fweb -fwhole-program -fsyntax-only -pedantic -pedantic-errors -w -Wextra -Wall -Waddress -Waggregate-return -Warray-bounds    -macro-redefined   -Wcast-align -Wcast-qual -Wchar-subscripts -Wclobbered -Wcomment -Wconversion -Wcoverage-mismatch    -Wdisabled-optimization -Wenum-compare  -Werror -Wfatal-errors -Wfloat-equal -Wformat -Wformat=2    -Wformat-nonliteral -Wformat-security -Wformat-y2k -Wignored-qualifiers -Winit-self -Winline -Winvalid-pch -Wunsafe-loop-optimizations -Wlogical-op -Wlong-long -Wmain -Wmissing-braces -Wmissing-field-initializers -Wmissing-format-attribute     -Wmissing-include-dirs -Wmissing-noreturn   -Woverlength-strings -Wpacked -Wpacked-bitfield-compat -Wpadded -Wparentheses -Wpedant    -Wpointer-arith -Wreturn-type -Wsequence-point -Wshadow -Wsign-compare -Wsign-conversion -Wstack-prot     -Wstrict-overflow  -Wswitch -Wswitch-default -Wswitch-enum -Wsync-nand -Wsystem-headers -Wtrigraphs -Wtype-limits -Wundef -Wuninitialized     -Wunknown-pragmas -Wunused -Wunused-function -Wunused-label -Wunused-parameter -Wunused-value -Wunused-variable -Wunused-but-set-parameter -Wunused-     -Wvariadic-macros -Wvla -Wvolatile-register-var -Wwrite-strings -dumpspecs -dumpmachine -dumpversion -fdbg-cnt-list -fdump-noaddr -fdump-unnumbered -fdump-unnumbered-links -fdump-tree-cfg -fdum    p-tree-vcg -fdump-tree-alias -fdump-tree-ch -fdump-tree-nrv -fdump-tree-vect -fdump-tree-sink -fcompare-debug-second -feliminate-dwarf2-dups -feliminate-unused-debug-types -felimina    te-unused-debug-symbols -femit-class-debug-always -fmem-report -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs -fsel-sched-verbose -fsel-sched-dump-cfg -fsel-sched-pipelin    ing-verbose -ftest-coverage -ftime-report -fvar-tracking -fvar-tracking-assignments -fvar-tracking-assignments-toggle -g -femit-struct-debug-baseonly -femit-struct-debug-reduced -p     -pg -print-libgcc-file-name -print-multi-directory -print-multi-lib -print-multi-os-directory -print-search-dirs -Q -print-sysroot -print-sysroot-headers-suffix -save-temps");
}

my $comperror;
if (!$full and !$extreme_full and !$extreme_optimize and !$extreme_warnings and !$extreme_debug){
	if ($compile){
		print YELLOW,"\n\nPlease wait, this will take a second...\n\n",RESET;
		$comperror = system("g++ -Wall -std=c++11 *.cpp -o test$lab-$user");
	}
}
elsif($full){
	$comperror = system("g++ -Wall -Werror -ansi -pedantic-errors -g -std=c++11 *.cpp -o test$lab-$user");
}
if($comperror){
	print RED,"\nERROR! Program couldn't compile!\n\n",RESET;
	exit($comperror);
}
elsif($compile){
	print BLUE,"\n\nCompilation complete,";
	print RED," test$lab-$user";
	print BLUE," binary created!",RESET;
}
print "\n\n";
my $valerror;
if($valgrind){
	print BLUE,"\nDoing tests with Valgrind, please wait\n\n",RESET
	$valerror = system("valgrind --leak-check=full -v ./test$lab-$user testfiles/projruntime.test");
}
if($valerror){
	print RED,"\n\n\nERROR! Make sure that there is a file named \"projruntime.test\" in your testfiles directory!\n\n",RESET;
	exit($valerror);
}
elsif($valgrind){
	print GREEN,"\nValgrind completed all tests successfully on ";
	print RED,"test$lab-$user\n\n";
	print GREEN,"Make sure you read the output to verfiy that there were no memory";
	print"leaks before continuing\n\n",RESET;
}
my $GDBerror;
my $GDBmessage;
if($GDB){
	print BLUE,"\nDoing tests with GDB, please wait\n\n",RESET
	$GDBmessage = `g++ -Wall -std=c++11 -g *.cpp -o ./test$lab-$user`;
	$GDBerror = system("gdb ./test$lab-$user");
	$GDBmessage = `gdb ./test$lab-$user`;
}
if($GDBmessage){
	print RED,"\nThere were problems detected using GDB\n",RESET;
	print"\n\n$GDBerror\n\n";
	exit(256);
}
elsif($GDB){
	print GREEN,"\nNo System faults detected\n",RESET;
}

if($quit){
	print YELLOW,"\nExiting with the -q flag\n\n",RESET;
	exit(0);
}

if($full){
	print GREEN,"\n\n\t\tSUCCESS!!!!! somehow you made it...",RESET;
}
print BLUE,"\n=========================\n",RESET;
print GREEN,"Press ENTER to continue\nPr";
print "ess \"q\" to quit\nPress \"l\" to list test files\n";
print"Type the name of a testfile to jump to it\n";
print"Press any other character to go backwards\n",RESET;
chomp($input = <STDIN>);
my $dir = "./testfiles/";#opens the testfile folder
opendir(BIN, $dir) or die "Can't open $dir: $!\nMake sure you have a directory called \"Testfiles\"";
my @testfiles = grep { -T "$dir/$_" } readdir BIN;#read in the testfile names
my @copy = @testfiles;
my $testfiles_size = @testfiles;
while($input ne "q" and $input ne ":q"){
	system("clear");
	my $name = substr $testfiles[$i], 4;
	print BLUE,"\n==========================================================";
	print "==\n\t   Analalyzing ";
	print RED,"$user\'s";
	print BLUE," output on ";
	print RED,"Test $name\n";
	print BLUE,"============================================================\n",RESET;
	system("cat -n testfiles/proj$name");
    print BLUE,"\n=========================\n",RESET;
    $fail = system("./test$lab-$user testfiles/proj$name");
	if($fail != 0){
		print RED,"\n\nERROR!!!\nYour binary needs to be in the format \"test[lab_nu";
		print "mber]-[your_name]\"\n";
		print "\nTry typing the command:  mv $user test2-$user\n\nor running \"analyze\" with the -c flag\n\n",RESET;
		$input = <STDIN>;
		exit(256);
	}
	#Allow forwards and backwards traversing of the list
	chomp($input = <STDIN>);
	if($input eq "l"){
		print BLUE,"\n=========================\n",RESET;
		print"Testfiles are:\n\n";
		my $list= "";
		foreach(@copy){
			$list = substr $_, 4;
			print GREEN,"$list ",RESET;
		}
		chomp($input = <STDIN>);
	}
	my($index)= grep{$copy[$_] eq "proj$input"} 0..$#copy;
	if($index){
		$i = $index-1;
	}
	elsif($input ne ""){
		--$i;
		--$i;
	}
	if($i >= $testfiles_size-1){
		$i = 0;
	}
	elsif($i < 0){
		$i = $testfiles_size-1;
	}
	else{
		++$i;
	}
	system("clear");
}
exit(0);
